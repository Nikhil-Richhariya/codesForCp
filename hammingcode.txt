def calc_redundant_bits(m):
    for i in range(m):
        if 2**i >= m + i + 1:
            return i

def pos_redundant_bits(data, r):
    j = 0
    k = 1
    m = len(data)
    res = ''

    for i in range(1, m + r + 1):
        if i == 2**j:
            res = res + '0'
            j += 1
        else:
            res = res + data[-1 * k]
            k += 1

    return res[::-1]

def calc_parity_bits(arr, r):
    n = len(arr)

    for i in range(r):
        val = 0
        for j in range(1, n + 1):
            if j & (2*i) == (2*i):
                val = val ^ int(arr[-1 * j])

        arr = arr[:n-(2*i)] + str(val) + arr[n-(2*i)+1:]
    return arr

def detect_error(arr, nr):
    n = len(arr)
    res = 0

    for i in range(nr):
        val = 0
        for j in range(1, n + 1):
            if j & (2*i) == (2*i):
                val = val ^ int(arr[-1 * j])

        res = res + val*(10**i)

    return int(str(res), 2)

# Enter the data to be transmitted
data_to_transmit = '1011001'

# Calculate the number of Redundant Bits Required
m = len(data_to_transmit)
r = calc_redundant_bits(m)

# Determine the positions of Redundant Bits
arr = pos_redundant_bits(data_to_transmit, r)

# Determine the parity bits
arr = calc_parity_bits(arr, r)

# Data to be transferred
print("Data transferred is " + arr)

# Stimulate error in transmission by changing a bit value.
transmitted_data_with_error = '11101001110'
print("Error Data is " + transmitted_data_with_error)

correction = detect_error(transmitted_data_with_error, r)
if correction == 0:
    print("There is no error in the received message.")
else:
    print("The position of error is ", len(transmitted_data_with_error) - correction + 1, "from the left")